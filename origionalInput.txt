CSCI 411 - Advanced Algorithms and ComplexityProjectMarch 1, 2022This project is an opportunity for you to investigate an algorithm that interests you. The main goalis for you to analyze and implement a complex, real-world algorithm on your own and to communicateyour findings effectively to a technical audience.The report, implementation, and feedback response components of the project will be due on April3rd by 11:59 pm. Submissions will be through Blackboard. The report and feedback responses shouldbe submitted as PDFs while your implementation should be submitted as a .cpp file. Presentations willtake place the week before the due date. More information regarding the format of each piece of theproject is below.This is a big project but you have a lot of freedom in the algorithm that you choose to study. Pickan algorithm in a field that you are excited about! Be sure to get started early and have fun!(60 pts) ReportThere is no length requirement for the report. As a general guideline, the report, including pseudocodeand figures, will likely be between 3 and 10 pages. It should be as clear and concise as possible whileproviding a complete, self-contained narrative. Below are some suggested sections for the report alongwith what they could contain.• Introduction - the introduction may include a brief history of the algorithm along with a description of its purpose and potential applications. This section should address why the algorithm isimportant.• Intuition - a high level but complete description of how the algorithm works.• Pseudocode and Detailed Description - formal pseudocode of the algorithm along with a morespecific description. While not necessarily a formal proof of correctness, this description shouldinclude an argument that the algorithm works as expected. Expectations regarding inputs andoutputs should be unambiguous and clear.• Run Time Analysis - a tight asymptotic analysis of the algorithm’s run time. Make sure notationand variable meanings are clear. This analysis does not need to consider each line of the algorithmindividually but it must address all major components of the algorithm including data structurecreation and upkeep as well as any pre- and post-processing steps. This section may also includedescriptions and results of different experiments. For example, figures showing run time as afunction of input size or a brief comparison of this algorithm against other approaches to thesame problem. Such experiments are not required.Do not forget to include proper citations of any resources that you use.1(25 pts) ImplementationImplement your algorithm, following the intuition and pseudocode provided in the report, in C++.Your code should conform to standard style guidelines, should be well commented, and must includetest cases verifying that the implementation works as expected. Depending on the complexity andsize of the algorithm you choose, 5 to 10 test cases should be sufficient. Make sure to include a briefcomment in main describing how to run your tests and how to run your code on different inputs.(15 pts) PresentationSeveral days before the project is due, you will give at least one informal 5-10 minute presentation to asmall group of classmates about your project. The goal of the presentation is for you to communicatethe important aspects of your algorithm to your peers. Your presentation should touch on intuition,pseudocode, and run time but does not need to include the full detail expected in your report.After each presentation, the audience will give the presenter feedback, verbal and written, to helpimprove their communication. This feedback should be used to enhance the report before submission.In written feedback, the audience can use the following questions as a guide:• What parts of the presentation were most effective?• Did you find any aspects of the algorithm particularly confusing or unclear? If so, what mighthelp to clarify those parts?• After the presentation, do you know why the algorithm is important, what the general idea behindthe algorithm is, and how efficient it is asymptotically?The presenter should submit a copy of this feedback along with names of the audience members andbrief comments on how the feedback affected the final report.Example AlgorithmsHere is a short list of algorithms that you might consider investigating. You are also more than welcometo pick an algorithm not on this list. No matter which algorithm you decide on, please discuss yourchoice with me before getting started. Pick an algorithm early so that you have plenty of time to workon the project. You must choose and have approval of an algorithm by March 7th.• Hopcroft-Karp algorithm• Gale–Shapley algorithm• Christofides algorithm• Fortune’s algorithm• Bron–Kerbosch algorithm• Sudoku solver• Decision tree learning• k-nearest neighbors2• Agglomerative hierarchical clustering• Hedge algorithmSome algorithms can be implemented using different data structures or techniques. These differencesmay or may not affect the run time. You do not need to focus on the fastest or most efficient approachfor this project. However, all parts of the project should consider the same approach. In particular,your intuition, pseudocode, run time analysis, and implementation should match. If you want, you maymention other approaches, and how they differ from the one you chose, briefly in the report.It is also worth mentioning that some algorithms are easier to analyze and implement than others.Be aware of this when picking an algorithm. Some consideration will be given to exceptionally difficultprojects and the bar will be higher for exceptionally easy projects. This project is worth 15% of yourfinal grade. As a result, I expect you to spend a significant amount of time between March 7th andApril 3rd polishing your pseudocode and your analysis and fine tuning your implementation. If you areworried about picking an algorithm that is too hard or too easy, or if you have any other questions,don’t hesitate to ask.3
